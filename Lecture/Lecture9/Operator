?:

condition ? s1 : s2 ;

        (True)  (False)
        
8쪽 위 1번, 아래 2번 가정 시,
a = b= c; -> 2는 허용되지만 1은 허용안됨.

b =c 먼저함 => 1은 void로 바껴서, a에 void를 넣게 됨으로, 시행 x

2의 경우 본인의 classname으로 초기화되기에 가능함.


<9>
Copy con, Assignment oper 동작 동일. 차이점은 콘스트럭터와 오퍼레이터 차이
constructor은 rhs에 instance 있음. left는 할당 이전. 따라서 이는 할당하면서 주어진 값으로 초기화 해줌.


AssinOper의 경우 값을 덮어 씌우는 것.!!
1. 동적 할당 메모리가 있느냐. -> 동적 할당된 공간을 해제 해줘야 함. 그 후에 다시 동적으로 메모리 공간 할당.
다음으로 값을 할당 해줘야 함.

2. 동적 할당 메모리가 없느냐. -> copy const와 동일


(11쪽) std::cout<<val<<"123" ==> cout<<val 처리 후에, 이건 다시 std::cout으로 변함.

(15쪽) is-a, has-a 개중요! derived class object 개중요!! 우리는 시스템을 만들려고 한다.
시스템을 만드는데 있어서 하나는 확장, 하나는 조합
확장은 특수하게(상속), 조합은 재활용  ==> 추상화와 상속은 매우 중요!!

(16쪽) 포인터에서 서클로, 서클에서 실린더로 확장이 가능! 상속을 통해서 만들 수 있다.
다르게 생각하면, 포인

(17쪽) 실린더, 써클4, 포인트3형식으로 콘스트럭터 호출되고, 역순으로 종료됨.
호출은 point가 젤 나중, body관점은 point가 맨우선

<18쪽> 디스트럭터는 콘스트럭터 반대순으로

<19쪽> public, private, protected 뭘로 상속 받느냐에 따라서 외부에서 해당 클래스
가ㅓ 상속받은 얘를 쓸 수 있을지 없을지 결정됨.

<20쪽> base는 상위 클래스 내용, derived는 하위에서 받아낸 것.
다음과 같은 것 가능.

/*
derived d1;
base* pb;
pb = d1;
derivde* pd;
pd = (derived*) pb; // downcasting
*/

51,52는 가능은 하지만 side effects가 발생할 수 있어서 조심해야하.